{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __assign, __spreadArrays } from \"tslib\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { DefaultHttpClient } from \"./defaultHttpClient\";\nimport { getPathStringFromParameter, getPathStringFromParameterPath } from \"./operationParameter\";\nimport { isStreamOperation } from \"./operationSpec\";\nimport { deserializationPolicy } from \"./policies/deserializationPolicy\";\nimport { exponentialRetryPolicy } from \"./policies/exponentialRetryPolicy\";\nimport { generateClientRequestIdPolicy } from \"./policies/generateClientRequestIdPolicy\";\nimport { userAgentPolicy, getDefaultUserAgentHeaderName, getDefaultUserAgentValue } from \"./policies/userAgentPolicy\";\nimport { DefaultRedirectOptions, redirectPolicy } from \"./policies/redirectPolicy\";\nimport { RequestPolicyOptions } from \"./policies/requestPolicy\";\nimport { rpRegistrationPolicy } from \"./policies/rpRegistrationPolicy\";\nimport { signingPolicy } from \"./policies/signingPolicy\";\nimport { systemErrorRetryPolicy } from \"./policies/systemErrorRetryPolicy\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { MapperType } from \"./serializer\";\nimport { URLBuilder } from \"./url\";\nimport * as utils from \"./util/utils\";\nimport { stringifyXML } from \"./util/xml\";\nimport { isWebResourceLike, WebResource } from \"./webResource\";\nimport { agentPolicy } from \"./policies/agentPolicy\";\nimport { proxyPolicy, getDefaultProxySettings } from \"./policies/proxyPolicy\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\nimport { AzureIdentityCredentialAdapter, azureResourceManagerEndpoints } from \"./credentials/azureIdentityTokenCredentialAdapter\";\n/**\n * @class\n * Initializes a new instance of the ServiceClient.\n */\nvar ServiceClient = /** @class */function () {\n  /**\n   * The ServiceClient constructor\n   * @constructor\n   * @param {ServiceClientCredentials} [credentials] The credentials object used for authentication.\n   * @param {ServiceClientOptions} [options] The service client options that govern the behavior of the client.\n   */\n  function ServiceClient(credentials, options) {\n    if (!options) {\n      options = {};\n    }\n    if (options.baseUri) {\n      this.baseUri = options.baseUri;\n    }\n    var serviceClientCredentials;\n    if (isTokenCredential(credentials)) {\n      var scope = undefined;\n      if ((options === null || options === void 0 ? void 0 : options.baseUri) && azureResourceManagerEndpoints.includes(options === null || options === void 0 ? void 0 : options.baseUri)) {\n        scope = options.baseUri + \"/.default\";\n      }\n      serviceClientCredentials = new AzureIdentityCredentialAdapter(credentials, scope);\n    } else {\n      serviceClientCredentials = credentials;\n    }\n    if (serviceClientCredentials && !serviceClientCredentials.signRequest) {\n      throw new Error(\"credentials argument needs to implement signRequest method\");\n    }\n    this._withCredentials = options.withCredentials || false;\n    this._httpClient = options.httpClient || new DefaultHttpClient();\n    this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);\n    var requestPolicyFactories;\n    if (Array.isArray(options.requestPolicyFactories)) {\n      requestPolicyFactories = options.requestPolicyFactories;\n    } else {\n      requestPolicyFactories = createDefaultRequestPolicyFactories(serviceClientCredentials, options);\n      if (options.requestPolicyFactories) {\n        var newRequestPolicyFactories = options.requestPolicyFactories(requestPolicyFactories);\n        if (newRequestPolicyFactories) {\n          requestPolicyFactories = newRequestPolicyFactories;\n        }\n      }\n    }\n    this._requestPolicyFactories = requestPolicyFactories;\n  }\n  /**\n   * Send the provided httpRequest.\n   */\n  ServiceClient.prototype.sendRequest = function (options) {\n    if (options === null || options === undefined || typeof options !== \"object\") {\n      throw new Error(\"options cannot be null or undefined and it must be of type object.\");\n    }\n    var httpRequest;\n    try {\n      if (isWebResourceLike(options)) {\n        options.validateRequestProperties();\n        httpRequest = options;\n      } else {\n        httpRequest = new WebResource();\n        httpRequest = httpRequest.prepare(options);\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    var httpPipeline = this._httpClient;\n    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {\n      for (var i = this._requestPolicyFactories.length - 1; i >= 0; --i) {\n        httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);\n      }\n    }\n    return httpPipeline.sendRequest(httpRequest);\n  };\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.\n   * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.\n   * @param {ServiceCallback} callback The callback to call when the response is received.\n   */\n  ServiceClient.prototype.sendOperationRequest = function (operationArguments, operationSpec, callback) {\n    if (typeof operationArguments.options === \"function\") {\n      callback = operationArguments.options;\n      operationArguments.options = undefined;\n    }\n    var httpRequest = new WebResource();\n    var result;\n    try {\n      var baseUri = operationSpec.baseUrl || this.baseUri;\n      if (!baseUri) {\n        throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\");\n      }\n      httpRequest.method = operationSpec.httpMethod;\n      httpRequest.operationSpec = operationSpec;\n      var requestUrl = URLBuilder.parse(baseUri);\n      if (operationSpec.path) {\n        requestUrl.appendPath(operationSpec.path);\n      }\n      if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {\n        for (var _i = 0, _a = operationSpec.urlParameters; _i < _a.length; _i++) {\n          var urlParameter = _a[_i];\n          var urlParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);\n          urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, getPathStringFromParameter(urlParameter));\n          if (!urlParameter.skipEncoding) {\n            urlParameterValue = encodeURIComponent(urlParameterValue);\n          }\n          requestUrl.replaceAll(\"{\" + (urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)) + \"}\", urlParameterValue);\n        }\n      }\n      if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {\n        for (var _b = 0, _c = operationSpec.queryParameters; _b < _c.length; _b++) {\n          var queryParameter = _c[_b];\n          var queryParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);\n          if (queryParameterValue != undefined) {\n            queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));\n            if (queryParameter.collectionFormat != undefined) {\n              if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {\n                if (queryParameterValue.length === 0) {\n                  queryParameterValue = \"\";\n                } else {\n                  for (var index in queryParameterValue) {\n                    var item = queryParameterValue[index];\n                    queryParameterValue[index] = item == undefined ? \"\" : item.toString();\n                  }\n                }\n              } else if (queryParameter.collectionFormat === QueryCollectionFormat.Ssv || queryParameter.collectionFormat === QueryCollectionFormat.Tsv) {\n                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n              }\n            }\n            if (!queryParameter.skipEncoding) {\n              if (Array.isArray(queryParameterValue)) {\n                for (var index in queryParameterValue) {\n                  if (queryParameterValue[index] !== undefined && queryParameterValue[index] !== null) {\n                    queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);\n                  }\n                }\n              } else {\n                queryParameterValue = encodeURIComponent(queryParameterValue);\n              }\n            }\n            if (queryParameter.collectionFormat != undefined && queryParameter.collectionFormat !== QueryCollectionFormat.Multi && queryParameter.collectionFormat !== QueryCollectionFormat.Ssv && queryParameter.collectionFormat !== QueryCollectionFormat.Tsv) {\n              queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n            }\n            requestUrl.setQueryParameter(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);\n          }\n        }\n      }\n      httpRequest.url = requestUrl.toString();\n      var contentType = operationSpec.contentType || this.requestContentType;\n      if (contentType) {\n        httpRequest.headers.set(\"Content-Type\", contentType);\n      }\n      if (operationSpec.headerParameters) {\n        for (var _d = 0, _e = operationSpec.headerParameters; _d < _e.length; _d++) {\n          var headerParameter = _e[_d];\n          var headerValue = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);\n          if (headerValue != undefined) {\n            headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n            var headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;\n            if (headerCollectionPrefix) {\n              for (var _f = 0, _g = Object.keys(headerValue); _f < _g.length; _f++) {\n                var key = _g[_f];\n                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);\n              }\n            } else {\n              httpRequest.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n            }\n          }\n        }\n      }\n      var options = operationArguments.options;\n      if (options) {\n        if (options.customHeaders) {\n          for (var customHeaderName in options.customHeaders) {\n            httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);\n          }\n        }\n        if (options.abortSignal) {\n          httpRequest.abortSignal = options.abortSignal;\n        }\n        if (options.timeout) {\n          httpRequest.timeout = options.timeout;\n        }\n        if (options.onUploadProgress) {\n          httpRequest.onUploadProgress = options.onUploadProgress;\n        }\n        if (options.onDownloadProgress) {\n          httpRequest.onDownloadProgress = options.onDownloadProgress;\n        }\n      }\n      httpRequest.withCredentials = this._withCredentials;\n      serializeRequestBody(this, httpRequest, operationArguments, operationSpec);\n      if (httpRequest.streamResponseBody == undefined) {\n        httpRequest.streamResponseBody = isStreamOperation(operationSpec);\n      }\n      result = this.sendRequest(httpRequest).then(function (res) {\n        return flattenResponse(res, operationSpec.responses[res.status]);\n      });\n    } catch (error) {\n      result = Promise.reject(error);\n    }\n    var cb = callback;\n    if (cb) {\n      result\n      // tslint:disable-next-line:no-null-keyword\n      .then(function (res) {\n        return cb(null, res._response.parsedBody, res._response.request, res._response);\n      }).catch(function (err) {\n        return cb(err);\n      });\n    }\n    return result;\n  };\n  return ServiceClient;\n}();\nexport { ServiceClient };\nexport function serializeRequestBody(serviceClient, httpRequest, operationArguments, operationSpec) {\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);\n    var bodyMapper = operationSpec.requestBody.mapper;\n    var required = bodyMapper.required,\n      xmlName = bodyMapper.xmlName,\n      xmlElementName = bodyMapper.xmlElementName,\n      serializedName = bodyMapper.serializedName;\n    var typeName = bodyMapper.type.name;\n    try {\n      if (httpRequest.body != undefined || required) {\n        var requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);\n        httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString);\n        var isStream = typeName === MapperType.Stream;\n        if (operationSpec.isXML) {\n          if (typeName === MapperType.Sequence) {\n            httpRequest.body = stringifyXML(utils.prepareXMLRootList(httpRequest.body, xmlElementName || xmlName || serializedName), {\n              rootName: xmlName || serializedName\n            });\n          } else if (!isStream) {\n            httpRequest.body = stringifyXML(httpRequest.body, {\n              rootName: xmlName || serializedName\n            });\n          }\n        } else if (!isStream) {\n          httpRequest.body = JSON.stringify(httpRequest.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(\"Error \\\"\" + error.message + \"\\\" occurred in serializing the payload - \" + JSON.stringify(serializedName, undefined, \"  \") + \".\");\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    httpRequest.formData = {};\n    for (var _i = 0, _a = operationSpec.formDataParameters; _i < _a.length; _i++) {\n      var formDataParameter = _a[_i];\n      var formDataParameterValue = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);\n      if (formDataParameterValue != undefined) {\n        var formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter));\n      }\n    }\n  }\n}\nfunction isRequestPolicyFactory(instance) {\n  return typeof instance.create === \"function\";\n}\nfunction getValueOrFunctionResult(value, defaultValueCreator) {\n  var result;\n  if (typeof value === \"string\") {\n    result = value;\n  } else {\n    result = defaultValueCreator();\n    if (typeof value === \"function\") {\n      result = value(result);\n    }\n  }\n  return result;\n}\nfunction createDefaultRequestPolicyFactories(credentials, options) {\n  var factories = [];\n  if (options.generateClientRequestIdHeader) {\n    factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));\n  }\n  if (credentials) {\n    if (isRequestPolicyFactory(credentials)) {\n      factories.push(credentials);\n    } else {\n      factories.push(signingPolicy(credentials));\n    }\n  }\n  var userAgentHeaderName = getValueOrFunctionResult(options.userAgentHeaderName, getDefaultUserAgentHeaderName);\n  var userAgentHeaderValue = getValueOrFunctionResult(options.userAgent, getDefaultUserAgentValue);\n  if (userAgentHeaderName && userAgentHeaderValue) {\n    factories.push(userAgentPolicy({\n      key: userAgentHeaderName,\n      value: userAgentHeaderValue\n    }));\n  }\n  var redirectOptions = __assign(__assign({}, DefaultRedirectOptions), options.redirectOptions);\n  if (redirectOptions.handleRedirects) {\n    factories.push(redirectPolicy(redirectOptions.maxRetries));\n  }\n  factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));\n  if (!options.noRetryPolicy) {\n    factories.push(exponentialRetryPolicy());\n    factories.push(systemErrorRetryPolicy());\n    factories.push(throttlingRetryPolicy());\n  }\n  factories.push(deserializationPolicy(options.deserializationContentTypes));\n  var proxySettings = options.proxySettings || getDefaultProxySettings();\n  if (proxySettings) {\n    factories.push(proxyPolicy(proxySettings));\n  }\n  if (options.agentSettings) {\n    factories.push(agentPolicy(options.agentSettings));\n  }\n  return factories;\n}\n/**\n * Get the property parent for the property at the provided path when starting with the provided\n * parent object.\n */\nexport function getPropertyParent(parent, propertyPath) {\n  if (parent && propertyPath) {\n    var propertyPathLength = propertyPath.length;\n    for (var i = 0; i < propertyPathLength - 1; ++i) {\n      var propertyName = propertyPath[i];\n      if (!parent[propertyName]) {\n        parent[propertyName] = {};\n      }\n      parent = parent[propertyName];\n    }\n  }\n  return parent;\n}\nfunction getOperationArgumentValueFromParameter(serviceClient, operationArguments, parameter, serializer) {\n  return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);\n}\nexport function getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameterPath, parameterMapper, serializer) {\n  var value;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        var propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n        if (!propertySearchResult.propertyFound) {\n          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);\n        }\n        var useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue = parameterMapper.required || parameterPath[0] === \"options\" && parameterPath.length === 2;\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n      // Serialize just for validation purposes.\n      var parameterPathString = getPathStringFromParameterPath(parameterPath, parameterMapper);\n      serializer.serialize(parameterMapper, value, parameterPathString);\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n    for (var propertyName in parameterPath) {\n      var propertyMapper = parameterMapper.type.modelProperties[propertyName];\n      var propertyPath = parameterPath[propertyName];\n      var propertyValue = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer);\n      // Serialize just for validation purposes.\n      var propertyPathString = getPathStringFromParameterPath(propertyPath, propertyMapper);\n      serializer.serialize(propertyMapper, propertyValue, propertyPathString);\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n  var result = {\n    propertyFound: false\n  };\n  var i = 0;\n  for (; i < parameterPath.length; ++i) {\n    var parameterPathPart = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent != undefined && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\nexport function flattenResponse(_response, responseSpec) {\n  var parsedHeaders = _response.parsedHeaders;\n  var bodyMapper = responseSpec && responseSpec.bodyMapper;\n  var addOperationResponse = function (obj) {\n    return Object.defineProperty(obj, \"_response\", {\n      value: _response\n    });\n  };\n  if (bodyMapper) {\n    var typeName = bodyMapper.type.name;\n    if (typeName === \"Stream\") {\n      return addOperationResponse(__assign(__assign({}, parsedHeaders), {\n        blobBody: _response.blobBody,\n        readableStreamBody: _response.readableStreamBody\n      }));\n    }\n    var modelProperties_1 = typeName === \"Composite\" && bodyMapper.type.modelProperties || {};\n    var isPageableResponse = Object.keys(modelProperties_1).some(function (k) {\n      return modelProperties_1[k].serializedName === \"\";\n    });\n    if (typeName === \"Sequence\" || isPageableResponse) {\n      // We're expecting a sequece(array) make sure that the response body is in the\n      // correct format, if not make it an empty array []\n      var parsedBody = Array.isArray(_response.parsedBody) ? _response.parsedBody : [];\n      var arrayResponse = __spreadArrays(parsedBody);\n      for (var _i = 0, _a = Object.keys(modelProperties_1); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (modelProperties_1[key].serializedName) {\n          arrayResponse[key] = _response.parsedBody[key];\n        }\n      }\n      if (parsedHeaders) {\n        for (var _b = 0, _c = Object.keys(parsedHeaders); _b < _c.length; _b++) {\n          var key = _c[_b];\n          arrayResponse[key] = parsedHeaders[key];\n        }\n      }\n      addOperationResponse(arrayResponse);\n      return arrayResponse;\n    }\n    if (typeName === \"Composite\" || typeName === \"Dictionary\") {\n      return addOperationResponse(__assign(__assign({}, parsedHeaders), _response.parsedBody));\n    }\n  }\n  if (bodyMapper || _response.request.method === \"HEAD\" || utils.isPrimitiveType(_response.parsedBody)) {\n    // primitive body types and HEAD booleans\n    return addOperationResponse(__assign(__assign({}, parsedHeaders), {\n      body: _response.parsedBody\n    }));\n  }\n  return addOperationResponse(__assign(__assign({}, parsedHeaders), _response.parsedBody));\n}","map":{"version":3,"mappings":"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","names":["isTokenCredential","DefaultHttpClient","getPathStringFromParameter","getPathStringFromParameterPath","isStreamOperation","deserializationPolicy","exponentialRetryPolicy","generateClientRequestIdPolicy","userAgentPolicy","getDefaultUserAgentHeaderName","getDefaultUserAgentValue","DefaultRedirectOptions","redirectPolicy","RequestPolicyOptions","rpRegistrationPolicy","signingPolicy","systemErrorRetryPolicy","QueryCollectionFormat","MapperType","URLBuilder","utils","stringifyXML","isWebResourceLike","WebResource","agentPolicy","proxyPolicy","getDefaultProxySettings","throttlingRetryPolicy","AzureIdentityCredentialAdapter","azureResourceManagerEndpoints","credentials","options","baseUri","serviceClientCredentials","scope","undefined","includes","signRequest","Error","_withCredentials","withCredentials","_httpClient","httpClient","_requestPolicyOptions","httpPipelineLogger","requestPolicyFactories","Array","isArray","createDefaultRequestPolicyFactories","newRequestPolicyFactories","_requestPolicyFactories","ServiceClient","httpRequest","validateRequestProperties","prepare","error","Promise","reject","httpPipeline","length","i","create","sendRequest","operationArguments","operationSpec","callback","result","baseUrl","method","httpMethod","requestUrl","parse","path","appendPath","urlParameters","_a","_i","urlParameter","urlParameterValue","getOperationArgumentValueFromParameter","serializer","serialize","mapper","skipEncoding","encodeURIComponent","replaceAll","serializedName","queryParameters","_c","_b","queryParameter","queryParameterValue","collectionFormat","Multi","index","item","toString","Ssv","Tsv","join","setQueryParameter","url","contentType","requestContentType","headers","set","headerParameters","_e","_d","headerParameter","headerValue","headerCollectionPrefix","_g","keys","_f","key","customHeaders","customHeaderName","abortSignal","timeout","onUploadProgress","onDownloadProgress","serializeRequestBody","streamResponseBody","then","res","responses","status","cb","_response","parsedBody","request","catch","err","serviceClient","requestBody","body","bodyMapper","xmlName","xmlElementName","typeName","type","name","required","requestBodyParameterPathString","isStream","Stream","isXML","Sequence","prepareXMLRootList","rootName","JSON","stringify","message","formDataParameters","formData","formDataParameter","formDataParameterValue","formDataParameterPropertyName","isRequestPolicyFactory","instance","getValueOrFunctionResult","value","defaultValueCreator","factories","generateClientRequestIdHeader","push","clientRequestIdHeaderName","userAgentHeaderName","userAgentHeaderValue","userAgent","redirectOptions","handleRedirects","maxRetries","rpRegistrationRetryTimeout","noRetryPolicy","deserializationContentTypes","proxySettings","agentSettings","getPropertyParent","parent","propertyPath","propertyPathLength","propertyName","parameter","getOperationArgumentValueFromParameterPath","parameterPath","parameterMapper","isConstant","defaultValue","propertySearchResult","getPropertyFromParameterPath","propertyFound","useDefaultValue","propertyValue","parameterPathString","propertyMapper","modelProperties","propertyPathString","parameterPathPart","flattenResponse","responseSpec","parsedHeaders","addOperationResponse","obj","defineProperty","blobBody","readableStreamBody","modelProperties_1","isPageableResponse","Object","some","k","arrayResponse","__spreadArrays","isPrimitiveType"],"sources":["C:\\Users\\willi\\Downloads\\azure-main\\node_modules\\@azure\\ms-rest-js\\lib\\serviceClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { ServiceClientCredentials } from \"./credentials/serviceClientCredentials\";\nimport { DefaultHttpClient } from \"./defaultHttpClient\";\nimport { HttpClient } from \"./httpClient\";\nimport { HttpOperationResponse, RestResponse } from \"./httpOperationResponse\";\nimport { HttpPipelineLogger } from \"./httpPipelineLogger\";\nimport { OperationArguments } from \"./operationArguments\";\nimport {\n  getPathStringFromParameter,\n  getPathStringFromParameterPath,\n  OperationParameter,\n  ParameterPath,\n} from \"./operationParameter\";\nimport { isStreamOperation, OperationSpec } from \"./operationSpec\";\nimport {\n  deserializationPolicy,\n  DeserializationContentTypes,\n} from \"./policies/deserializationPolicy\";\nimport { exponentialRetryPolicy } from \"./policies/exponentialRetryPolicy\";\nimport { generateClientRequestIdPolicy } from \"./policies/generateClientRequestIdPolicy\";\nimport {\n  userAgentPolicy,\n  getDefaultUserAgentHeaderName,\n  getDefaultUserAgentValue,\n} from \"./policies/userAgentPolicy\";\nimport { DefaultRedirectOptions, RedirectOptions, redirectPolicy } from \"./policies/redirectPolicy\";\nimport {\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  RequestPolicyOptionsLike,\n} from \"./policies/requestPolicy\";\nimport { rpRegistrationPolicy } from \"./policies/rpRegistrationPolicy\";\nimport { signingPolicy } from \"./policies/signingPolicy\";\nimport { systemErrorRetryPolicy } from \"./policies/systemErrorRetryPolicy\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { CompositeMapper, DictionaryMapper, Mapper, MapperType, Serializer } from \"./serializer\";\nimport { URLBuilder } from \"./url\";\nimport * as utils from \"./util/utils\";\nimport { stringifyXML } from \"./util/xml\";\nimport {\n  RequestOptionsBase,\n  RequestPrepareOptions,\n  WebResourceLike,\n  isWebResourceLike,\n  WebResource,\n} from \"./webResource\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ServiceCallback } from \"./util/utils\";\nimport { agentPolicy } from \"./policies/agentPolicy\";\nimport { proxyPolicy, getDefaultProxySettings } from \"./policies/proxyPolicy\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\nimport { Agent } from \"http\";\nimport {\n  AzureIdentityCredentialAdapter,\n  azureResourceManagerEndpoints,\n} from \"./credentials/azureIdentityTokenCredentialAdapter\";\n\n/**\n * HTTP proxy settings (Node.js only)\n */\nexport interface ProxySettings {\n  host: string;\n  port: number;\n  username?: string;\n  password?: string;\n}\n\n/**\n * HTTP and HTTPS agents (Node.js only)\n */\nexport interface AgentSettings {\n  http: Agent;\n  https: Agent;\n}\n\n/**\n * Options to be provided while creating the client.\n */\nexport interface ServiceClientOptions {\n  /**\n   * An array of factories which get called to create the RequestPolicy pipeline used to send a HTTP\n   * request on the wire, or a function that takes in the defaultRequestPolicyFactories and returns\n   * the requestPolicyFactories that will be used.\n   */\n  requestPolicyFactories?:\n    | RequestPolicyFactory[]\n    | ((defaultRequestPolicyFactories: RequestPolicyFactory[]) => void | RequestPolicyFactory[]);\n  /**\n   * The HttpClient that will be used to send HTTP requests.\n   */\n  httpClient?: HttpClient;\n  /**\n   * The HttpPipelineLogger that can be used to debug RequestPolicies within the HTTP pipeline.\n   */\n  httpPipelineLogger?: HttpPipelineLogger;\n  /**\n   * If set to true, turn off the default retry policy.\n   */\n  noRetryPolicy?: boolean;\n  /**\n   * Gets or sets the retry timeout in seconds for AutomaticRPRegistration. Default value is 30.\n   */\n  rpRegistrationRetryTimeout?: number;\n  /**\n   * Whether or not to generate a client request ID header for each HTTP request.\n   */\n  generateClientRequestIdHeader?: boolean;\n  /**\n   * Whether to include credentials in CORS requests in the browser.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials for more information.\n   */\n  withCredentials?: boolean;\n  /**\n   * If specified, a GenerateRequestIdPolicy will be added to the HTTP pipeline that will add a\n   * header to all outgoing requests with this header name and a random UUID as the request ID.\n   */\n  clientRequestIdHeaderName?: string;\n  /**\n   * The content-types that will be associated with JSON or XML serialization.\n   */\n  deserializationContentTypes?: DeserializationContentTypes;\n  /**\n   * The header name to use for the telemetry header while sending the request. If this is not\n   * specified, then \"User-Agent\" will be used when running on Node.js and \"x-ms-command-name\" will\n   * be used when running in a browser.\n   */\n  userAgentHeaderName?: string | ((defaultUserAgentHeaderName: string) => string);\n  /**\n   * The string to be set to the telemetry header while sending the request, or a function that\n   * takes in the default user-agent string and returns the user-agent string that will be used.\n   */\n  userAgent?: string | ((defaultUserAgent: string) => string);\n  /**\n   * Proxy settings which will be used for every HTTP request (Node.js only).\n   */\n  proxySettings?: ProxySettings;\n  /**\n   * Options for how redirect responses are handled.\n   */\n  redirectOptions?: RedirectOptions;\n  /**\n   * HTTP and HTTPS agents which will be used for every HTTP request (Node.js only).\n   */\n  agentSettings?: AgentSettings;\n  /**\n   * If specified:\n   * - This `baseUri` becomes the base URI that requests will be made against for this ServiceClient.\n   * - If the `baseUri` matches a known resource manager endpoint and if a `TokenCredential` was passed through the constructor, this `baseUri` defines the `getToken` scope to be `${options.baseUri}/.default`. Otherwise, the scope would default to \"https://management.azure.com/.default\".\n   *\n   * If it is not specified:\n   * - All OperationSpecs must contain a baseUrl property.\n   * - If a `TokenCredential` was passed through the constructor, the `getToken` scope is set to be \"https://management.azure.com/.default\".\n   */\n  baseUri?: string;\n}\n\n/**\n * @class\n * Initializes a new instance of the ServiceClient.\n */\nexport class ServiceClient {\n  /**\n   * The base URI against which requests will be made when using this ServiceClient instance.\n   *\n   * This can be set either by setting the `baseUri` in the `options` parameter to the ServiceClient constructor or directly after constructing the ServiceClient.\n   * If set via the ServiceClient constructor when using the overload that takes the `TokenCredential`, and if it matches a known resource manager endpoint, this base URI sets the scope used to get the AAD token to `${baseUri}/.default` instead of the default \"https://management.azure.com/.default\"\n   *\n   * If it is not specified, all OperationSpecs must contain a baseUrl property.\n   */\n  protected baseUri?: string;\n\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  protected requestContentType?: string;\n\n  /**\n   * The HTTP client that will be used to send requests.\n   */\n  private readonly _httpClient: HttpClient;\n  private readonly _requestPolicyOptions: RequestPolicyOptionsLike;\n\n  private readonly _requestPolicyFactories: RequestPolicyFactory[];\n  private readonly _withCredentials: boolean;\n\n  /**\n   * The ServiceClient constructor\n   * @constructor\n   * @param {ServiceClientCredentials} [credentials] The credentials object used for authentication.\n   * @param {ServiceClientOptions} [options] The service client options that govern the behavior of the client.\n   */\n  constructor(\n    credentials?: ServiceClientCredentials | TokenCredential,\n    options?: ServiceClientOptions\n  ) {\n    if (!options) {\n      options = {};\n    }\n\n    if (options.baseUri) {\n      this.baseUri = options.baseUri;\n    }\n\n    let serviceClientCredentials: ServiceClientCredentials | undefined;\n    if (isTokenCredential(credentials)) {\n      let scope: string | undefined = undefined;\n      if (options?.baseUri && azureResourceManagerEndpoints.includes(options?.baseUri)) {\n        scope = `${options.baseUri}/.default`;\n      }\n      serviceClientCredentials = new AzureIdentityCredentialAdapter(credentials, scope);\n    } else {\n      serviceClientCredentials = credentials;\n    }\n\n    if (serviceClientCredentials && !serviceClientCredentials.signRequest) {\n      throw new Error(\"credentials argument needs to implement signRequest method\");\n    }\n\n    this._withCredentials = options.withCredentials || false;\n    this._httpClient = options.httpClient || new DefaultHttpClient();\n    this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);\n\n    let requestPolicyFactories: RequestPolicyFactory[];\n    if (Array.isArray(options.requestPolicyFactories)) {\n      requestPolicyFactories = options.requestPolicyFactories;\n    } else {\n      requestPolicyFactories = createDefaultRequestPolicyFactories(\n        serviceClientCredentials,\n        options\n      );\n      if (options.requestPolicyFactories) {\n        const newRequestPolicyFactories:\n          | void\n          | RequestPolicyFactory[] = options.requestPolicyFactories(requestPolicyFactories);\n        if (newRequestPolicyFactories) {\n          requestPolicyFactories = newRequestPolicyFactories;\n        }\n      }\n    }\n    this._requestPolicyFactories = requestPolicyFactories;\n  }\n\n  /**\n   * Send the provided httpRequest.\n   */\n  sendRequest(options: RequestPrepareOptions | WebResourceLike): Promise<HttpOperationResponse> {\n    if (options === null || options === undefined || typeof options !== \"object\") {\n      throw new Error(\"options cannot be null or undefined and it must be of type object.\");\n    }\n\n    let httpRequest: WebResourceLike;\n    try {\n      if (isWebResourceLike(options)) {\n        options.validateRequestProperties();\n        httpRequest = options;\n      } else {\n        httpRequest = new WebResource();\n        httpRequest = httpRequest.prepare(options);\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    let httpPipeline: RequestPolicy = this._httpClient;\n    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {\n      for (let i = this._requestPolicyFactories.length - 1; i >= 0; --i) {\n        httpPipeline = this._requestPolicyFactories[i].create(\n          httpPipeline,\n          this._requestPolicyOptions\n        );\n      }\n    }\n    return httpPipeline.sendRequest(httpRequest);\n  }\n\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.\n   * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.\n   * @param {ServiceCallback} callback The callback to call when the response is received.\n   */\n  sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n    callback?: ServiceCallback<any>\n  ): Promise<RestResponse> {\n    if (typeof operationArguments.options === \"function\") {\n      callback = operationArguments.options;\n      operationArguments.options = undefined;\n    }\n\n    const httpRequest = new WebResource();\n\n    let result: Promise<RestResponse>;\n    try {\n      const baseUri: string | undefined = operationSpec.baseUrl || this.baseUri;\n      if (!baseUri) {\n        throw new Error(\n          \"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\"\n        );\n      }\n\n      httpRequest.method = operationSpec.httpMethod;\n      httpRequest.operationSpec = operationSpec;\n\n      const requestUrl: URLBuilder = URLBuilder.parse(baseUri);\n      if (operationSpec.path) {\n        requestUrl.appendPath(operationSpec.path);\n      }\n      if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {\n        for (const urlParameter of operationSpec.urlParameters) {\n          let urlParameterValue: string = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            urlParameter,\n            operationSpec.serializer\n          );\n          urlParameterValue = operationSpec.serializer.serialize(\n            urlParameter.mapper,\n            urlParameterValue,\n            getPathStringFromParameter(urlParameter)\n          );\n          if (!urlParameter.skipEncoding) {\n            urlParameterValue = encodeURIComponent(urlParameterValue);\n          }\n          requestUrl.replaceAll(\n            `{${urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)}}`,\n            urlParameterValue\n          );\n        }\n      }\n      if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {\n        for (const queryParameter of operationSpec.queryParameters) {\n          let queryParameterValue: any = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            queryParameter,\n            operationSpec.serializer\n          );\n          if (queryParameterValue != undefined) {\n            queryParameterValue = operationSpec.serializer.serialize(\n              queryParameter.mapper,\n              queryParameterValue,\n              getPathStringFromParameter(queryParameter)\n            );\n            if (queryParameter.collectionFormat != undefined) {\n              if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {\n                if (queryParameterValue.length === 0) {\n                  queryParameterValue = \"\";\n                } else {\n                  for (const index in queryParameterValue) {\n                    const item = queryParameterValue[index];\n                    queryParameterValue[index] = item == undefined ? \"\" : item.toString();\n                  }\n                }\n              } else if (\n                queryParameter.collectionFormat === QueryCollectionFormat.Ssv ||\n                queryParameter.collectionFormat === QueryCollectionFormat.Tsv\n              ) {\n                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n              }\n            }\n            if (!queryParameter.skipEncoding) {\n              if (Array.isArray(queryParameterValue)) {\n                for (const index in queryParameterValue) {\n                  if (\n                    queryParameterValue[index] !== undefined &&\n                    queryParameterValue[index] !== null\n                  ) {\n                    queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);\n                  }\n                }\n              } else {\n                queryParameterValue = encodeURIComponent(queryParameterValue);\n              }\n            }\n            if (\n              queryParameter.collectionFormat != undefined &&\n              queryParameter.collectionFormat !== QueryCollectionFormat.Multi &&\n              queryParameter.collectionFormat !== QueryCollectionFormat.Ssv &&\n              queryParameter.collectionFormat !== QueryCollectionFormat.Tsv\n            ) {\n              queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n            }\n            requestUrl.setQueryParameter(\n              queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter),\n              queryParameterValue\n            );\n          }\n        }\n      }\n      httpRequest.url = requestUrl.toString();\n\n      const contentType = operationSpec.contentType || this.requestContentType;\n      if (contentType) {\n        httpRequest.headers.set(\"Content-Type\", contentType);\n      }\n\n      if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n          let headerValue: any = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            headerParameter,\n            operationSpec.serializer\n          );\n          if (headerValue != undefined) {\n            headerValue = operationSpec.serializer.serialize(\n              headerParameter.mapper,\n              headerValue,\n              getPathStringFromParameter(headerParameter)\n            );\n            const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper)\n              .headerCollectionPrefix;\n            if (headerCollectionPrefix) {\n              for (const key of Object.keys(headerValue)) {\n                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);\n              }\n            } else {\n              httpRequest.headers.set(\n                headerParameter.mapper.serializedName ||\n                  getPathStringFromParameter(headerParameter),\n                headerValue\n              );\n            }\n          }\n        }\n      }\n\n      const options: RequestOptionsBase | undefined = operationArguments.options;\n      if (options) {\n        if (options.customHeaders) {\n          for (const customHeaderName in options.customHeaders) {\n            httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);\n          }\n        }\n\n        if (options.abortSignal) {\n          httpRequest.abortSignal = options.abortSignal;\n        }\n\n        if (options.timeout) {\n          httpRequest.timeout = options.timeout;\n        }\n\n        if (options.onUploadProgress) {\n          httpRequest.onUploadProgress = options.onUploadProgress;\n        }\n\n        if (options.onDownloadProgress) {\n          httpRequest.onDownloadProgress = options.onDownloadProgress;\n        }\n      }\n\n      httpRequest.withCredentials = this._withCredentials;\n\n      serializeRequestBody(this, httpRequest, operationArguments, operationSpec);\n\n      if (httpRequest.streamResponseBody == undefined) {\n        httpRequest.streamResponseBody = isStreamOperation(operationSpec);\n      }\n\n      result = this.sendRequest(httpRequest).then((res) =>\n        flattenResponse(res, operationSpec.responses[res.status])\n      );\n    } catch (error) {\n      result = Promise.reject(error);\n    }\n\n    const cb = callback;\n    if (cb) {\n      result\n        // tslint:disable-next-line:no-null-keyword\n        .then((res) => cb(null, res._response.parsedBody, res._response.request, res._response))\n        .catch((err) => cb(err));\n    }\n\n    return result;\n  }\n}\n\nexport function serializeRequestBody(\n  serviceClient: ServiceClient,\n  httpRequest: WebResourceLike,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec\n): void {\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    httpRequest.body = getOperationArgumentValueFromParameter(\n      serviceClient,\n      operationArguments,\n      operationSpec.requestBody,\n      operationSpec.serializer\n    );\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const { required, xmlName, xmlElementName, serializedName } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n    try {\n      if (httpRequest.body != undefined || required) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(\n          operationSpec.requestBody\n        );\n        httpRequest.body = operationSpec.serializer.serialize(\n          bodyMapper,\n          httpRequest.body,\n          requestBodyParameterPathString\n        );\n        const isStream = typeName === MapperType.Stream;\n        if (operationSpec.isXML) {\n          if (typeName === MapperType.Sequence) {\n            httpRequest.body = stringifyXML(\n              utils.prepareXMLRootList(\n                httpRequest.body,\n                xmlElementName || xmlName || serializedName!\n              ),\n              { rootName: xmlName || serializedName }\n            );\n          } else if (!isStream) {\n            httpRequest.body = stringifyXML(httpRequest.body, {\n              rootName: xmlName || serializedName,\n            });\n          }\n        } else if (!isStream) {\n          httpRequest.body = JSON.stringify(httpRequest.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(\n        `Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(\n          serializedName,\n          undefined,\n          \"  \"\n        )}.`\n      );\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    httpRequest.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue: any = getOperationArgumentValueFromParameter(\n        serviceClient,\n        operationArguments,\n        formDataParameter,\n        operationSpec.serializer\n      );\n      if (formDataParameterValue != undefined) {\n        const formDataParameterPropertyName: string =\n          formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(\n          formDataParameter.mapper,\n          formDataParameterValue,\n          getPathStringFromParameter(formDataParameter)\n        );\n      }\n    }\n  }\n}\n\nfunction isRequestPolicyFactory(instance: any): instance is RequestPolicyFactory {\n  return typeof instance.create === \"function\";\n}\n\nfunction getValueOrFunctionResult(\n  value: undefined | string | ((defaultValue: string) => string),\n  defaultValueCreator: () => string\n): string {\n  let result: string;\n  if (typeof value === \"string\") {\n    result = value;\n  } else {\n    result = defaultValueCreator();\n    if (typeof value === \"function\") {\n      result = value(result);\n    }\n  }\n  return result;\n}\n\nfunction createDefaultRequestPolicyFactories(\n  credentials: ServiceClientCredentials | RequestPolicyFactory | undefined,\n  options: ServiceClientOptions\n): RequestPolicyFactory[] {\n  const factories: RequestPolicyFactory[] = [];\n\n  if (options.generateClientRequestIdHeader) {\n    factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));\n  }\n\n  if (credentials) {\n    if (isRequestPolicyFactory(credentials)) {\n      factories.push(credentials);\n    } else {\n      factories.push(signingPolicy(credentials));\n    }\n  }\n\n  const userAgentHeaderName: string = getValueOrFunctionResult(\n    options.userAgentHeaderName,\n    getDefaultUserAgentHeaderName\n  );\n  const userAgentHeaderValue: string = getValueOrFunctionResult(\n    options.userAgent,\n    getDefaultUserAgentValue\n  );\n  if (userAgentHeaderName && userAgentHeaderValue) {\n    factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));\n  }\n\n  const redirectOptions = {\n    ...DefaultRedirectOptions,\n    ...options.redirectOptions,\n  };\n  if (redirectOptions.handleRedirects) {\n    factories.push(redirectPolicy(redirectOptions.maxRetries));\n  }\n\n  factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));\n\n  if (!options.noRetryPolicy) {\n    factories.push(exponentialRetryPolicy());\n    factories.push(systemErrorRetryPolicy());\n    factories.push(throttlingRetryPolicy());\n  }\n\n  factories.push(deserializationPolicy(options.deserializationContentTypes));\n\n  const proxySettings = options.proxySettings || getDefaultProxySettings();\n  if (proxySettings) {\n    factories.push(proxyPolicy(proxySettings));\n  }\n\n  if (options.agentSettings) {\n    factories.push(agentPolicy(options.agentSettings));\n  }\n\n  return factories;\n}\n\nexport type PropertyParent = { [propertyName: string]: any };\n\n/**\n * Get the property parent for the property at the provided path when starting with the provided\n * parent object.\n */\nexport function getPropertyParent(parent: PropertyParent, propertyPath: string[]): PropertyParent {\n  if (parent && propertyPath) {\n    const propertyPathLength: number = propertyPath.length;\n    for (let i = 0; i < propertyPathLength - 1; ++i) {\n      const propertyName: string = propertyPath[i];\n      if (!parent[propertyName]) {\n        parent[propertyName] = {};\n      }\n      parent = parent[propertyName];\n    }\n  }\n  return parent;\n}\n\nfunction getOperationArgumentValueFromParameter(\n  serviceClient: ServiceClient,\n  operationArguments: OperationArguments,\n  parameter: OperationParameter,\n  serializer: Serializer\n): any {\n  return getOperationArgumentValueFromParameterPath(\n    serviceClient,\n    operationArguments,\n    parameter.parameterPath,\n    parameter.mapper,\n    serializer\n  );\n}\n\nexport function getOperationArgumentValueFromParameterPath(\n  serviceClient: ServiceClient,\n  operationArguments: OperationArguments,\n  parameterPath: ParameterPath,\n  parameterMapper: Mapper,\n  serializer: Serializer\n): any {\n  let value: any;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult: PropertySearchResult = getPropertyFromParameterPath(\n          operationArguments,\n          parameterPath\n        );\n        if (!propertySearchResult.propertyFound) {\n          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);\n        }\n\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue =\n            parameterMapper.required ||\n            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n\n      // Serialize just for validation purposes.\n      const parameterPathString: string = getPathStringFromParameterPath(\n        parameterPath,\n        parameterMapper\n      );\n      serializer.serialize(parameterMapper, value, parameterPathString);\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper: Mapper = (parameterMapper as CompositeMapper).type.modelProperties![\n        propertyName\n      ];\n      const propertyPath: ParameterPath = parameterPath[propertyName];\n      const propertyValue: any = getOperationArgumentValueFromParameterPath(\n        serviceClient,\n        operationArguments,\n        propertyPath,\n        propertyMapper,\n        serializer\n      );\n      // Serialize just for validation purposes.\n      const propertyPathString: string = getPathStringFromParameterPath(\n        propertyPath,\n        propertyMapper\n      );\n      serializer.serialize(propertyMapper, propertyValue, propertyPathString);\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\n\ninterface PropertySearchResult {\n  propertyValue?: any;\n  propertyFound: boolean;\n}\n\nfunction getPropertyFromParameterPath(\n  parent: { [parameterName: string]: any },\n  parameterPath: string[]\n): PropertySearchResult {\n  const result: PropertySearchResult = { propertyFound: false };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart: string = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent != undefined && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\n\nexport function flattenResponse(\n  _response: HttpOperationResponse,\n  responseSpec: OperationResponse | undefined\n): RestResponse {\n  const parsedHeaders = _response.parsedHeaders;\n  const bodyMapper = responseSpec && responseSpec.bodyMapper;\n\n  const addOperationResponse = (obj: {}) =>\n    Object.defineProperty(obj, \"_response\", {\n      value: _response,\n    });\n\n  if (bodyMapper) {\n    const typeName = bodyMapper.type.name;\n    if (typeName === \"Stream\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        blobBody: _response.blobBody,\n        readableStreamBody: _response.readableStreamBody,\n      });\n    }\n\n    const modelProperties =\n      (typeName === \"Composite\" && (bodyMapper as CompositeMapper).type.modelProperties) || {};\n    const isPageableResponse = Object.keys(modelProperties).some(\n      (k) => modelProperties[k].serializedName === \"\"\n    );\n    if (typeName === \"Sequence\" || isPageableResponse) {\n      // We're expecting a sequece(array) make sure that the response body is in the\n      // correct format, if not make it an empty array []\n      const parsedBody = Array.isArray(_response.parsedBody) ? _response.parsedBody : [];\n      const arrayResponse = [...parsedBody] as RestResponse & any[];\n\n      for (const key of Object.keys(modelProperties)) {\n        if (modelProperties[key].serializedName) {\n          arrayResponse[key] = _response.parsedBody[key];\n        }\n      }\n\n      if (parsedHeaders) {\n        for (const key of Object.keys(parsedHeaders)) {\n          arrayResponse[key] = parsedHeaders[key];\n        }\n      }\n      addOperationResponse(arrayResponse);\n      return arrayResponse;\n    }\n\n    if (typeName === \"Composite\" || typeName === \"Dictionary\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        ..._response.parsedBody,\n      });\n    }\n  }\n\n  if (\n    bodyMapper ||\n    _response.request.method === \"HEAD\" ||\n    utils.isPrimitiveType(_response.parsedBody)\n  ) {\n    // primitive body types and HEAD booleans\n    return addOperationResponse({\n      ...parsedHeaders,\n      body: _response.parsedBody,\n    });\n  }\n\n  return addOperationResponse({\n    ...parsedHeaders,\n    ..._response.parsedBody,\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}