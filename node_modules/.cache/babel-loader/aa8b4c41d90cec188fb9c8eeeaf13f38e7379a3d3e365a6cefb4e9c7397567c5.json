{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n  return headerName.toLowerCase();\n}\nexport function isHttpHeadersLike(object) {\n  if (!object || typeof object !== \"object\") {\n    return false;\n  }\n  if (typeof object.rawHeaders === \"function\" && typeof object.clone === \"function\" && typeof object.get === \"function\" && typeof object.set === \"function\" && typeof object.contains === \"function\" && typeof object.remove === \"function\" && typeof object.headersArray === \"function\" && typeof object.headerValues === \"function\" && typeof object.headerNames === \"function\" && typeof object.toJson === \"function\") {\n    return true;\n  }\n  return false;\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\nvar HttpHeaders = /** @class */function () {\n  function HttpHeaders(rawHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (var headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName The name of the header to set. This value is case-insensitive.\n   * @param headerValue The value of the header to set.\n   */\n  HttpHeaders.prototype.set = function (headerName, headerValue) {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString()\n    };\n  };\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName The name of the header.\n   */\n  HttpHeaders.prototype.get = function (headerName) {\n    var header = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  };\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  HttpHeaders.prototype.contains = function (headerName) {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  };\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName The name of the header to remove.\n   */\n  HttpHeaders.prototype.remove = function (headerName) {\n    var result = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  };\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  HttpHeaders.prototype.rawHeaders = function () {\n    var result = {};\n    for (var headerKey in this._headersMap) {\n      var header = this._headersMap[headerKey];\n      result[header.name.toLowerCase()] = header.value;\n    }\n    return result;\n  };\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  HttpHeaders.prototype.headersArray = function () {\n    var headers = [];\n    for (var headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  };\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  HttpHeaders.prototype.headerNames = function () {\n    var headerNames = [];\n    var headers = this.headersArray();\n    for (var i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  };\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  HttpHeaders.prototype.headerValues = function () {\n    var headerValues = [];\n    var headers = this.headersArray();\n    for (var i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  };\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  HttpHeaders.prototype.toJson = function () {\n    return this.rawHeaders();\n  };\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  HttpHeaders.prototype.toString = function () {\n    return JSON.stringify(this.toJson());\n  };\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  HttpHeaders.prototype.clone = function () {\n    return new HttpHeaders(this.rawHeaders());\n  };\n  return HttpHeaders;\n}();\nexport { HttpHeaders };","map":{"version":3,"mappings":"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","names":["getHeaderKey","headerName","toLowerCase","isHttpHeadersLike","object","rawHeaders","clone","get","set","contains","remove","headersArray","headerValues","headerNames","toJson","_headersMap","HttpHeaders","headerValue","name","value","toString","header","undefined","result","headerKey","headers","push","i","length","JSON","stringify"],"sources":["C:\\Users\\willi\\Downloads\\azure-main\\node_modules\\@azure\\ms-rest-js\\lib\\httpHeaders.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName: string) {\n  return headerName.toLowerCase();\n}\n\n/**\n * An individual header within a HttpHeaders collection.\n */\nexport interface HttpHeader {\n  /**\n   * The name of the header.\n   */\n  name: string;\n\n  /**\n   * The value of the header.\n   */\n  value: string;\n}\n\n/**\n * A HttpHeaders collection represented as a simple JSON object.\n */\nexport type RawHttpHeaders = { [headerName: string]: string };\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport interface HttpHeadersLike {\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName The name of the header to set. This value is case-insensitive.\n   * @param headerValue The value of the header to set.\n   */\n  set(headerName: string, headerValue: string | number): void;\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName The name of the header.\n   */\n  get(headerName: string): string | undefined;\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  contains(headerName: string): boolean;\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName The name of the header to remove.\n   */\n  remove(headerName: string): boolean;\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  rawHeaders(): RawHttpHeaders;\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  headersArray(): HttpHeader[];\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  headerNames(): string[];\n  /**\n   * Get the header values that are contained in this collection.\n   */\n  headerValues(): string[];\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  clone(): HttpHeadersLike;\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   * The result is the same as `rawHeaders()`.\n   */\n  toJson(): RawHttpHeaders;\n}\n\nexport function isHttpHeadersLike(object?: any): object is HttpHeadersLike {\n  if (!object || typeof object !== \"object\") {\n    return false;\n  }\n\n  if (\n    typeof object.rawHeaders === \"function\" &&\n    typeof object.clone === \"function\" &&\n    typeof object.get === \"function\" &&\n    typeof object.set === \"function\" &&\n    typeof object.contains === \"function\" &&\n    typeof object.remove === \"function\" &&\n    typeof object.headersArray === \"function\" &&\n    typeof object.headerValues === \"function\" &&\n    typeof object.headerNames === \"function\" &&\n    typeof object.toJson === \"function\"\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders {\n  private readonly _headersMap: { [headerKey: string]: HttpHeader };\n\n  constructor(rawHeaders?: RawHttpHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName The name of the header to set. This value is case-insensitive.\n   * @param headerValue The value of the header to set.\n   */\n  public set(headerName: string, headerValue: string | number): void {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString(),\n    };\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName The name of the header.\n   */\n  public get(headerName: string): string | undefined {\n    const header: HttpHeader = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  public contains(headerName: string): boolean {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName The name of the header to remove.\n   */\n  public remove(headerName: string): boolean {\n    const result: boolean = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  public rawHeaders(): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    for (const headerKey in this._headersMap) {\n      const header: HttpHeader = this._headersMap[headerKey];\n      result[header.name.toLowerCase()] = header.value;\n    }\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  public headersArray(): HttpHeader[] {\n    const headers: HttpHeader[] = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerNames(): string[] {\n    const headerNames: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerValues(): string[] {\n    const headerValues: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJson(): RawHttpHeaders {\n    return this.rawHeaders();\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJson());\n  }\n\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  public clone(): HttpHeaders {\n    return new HttpHeaders(this.rawHeaders());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}