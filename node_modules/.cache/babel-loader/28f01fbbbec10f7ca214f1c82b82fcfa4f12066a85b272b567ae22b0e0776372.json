{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function systemErrorRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\n  return {\n    create: function (nextPolicy, options) {\n      return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n *\n * @constructor\n * @param {number} retryCount        The client retry count.\n * @param {number} retryInterval     The client retry interval, in milliseconds.\n * @param {number} minRetryInterval  The minimum retry interval, in milliseconds.\n * @param {number} maxRetryInterval  The maximum retry interval, in milliseconds.\n */\nvar SystemErrorRetryPolicy = /** @class */function (_super) {\n  __extends(SystemErrorRetryPolicy, _super);\n  function SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n    _this.DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\n    _this.DEFAULT_CLIENT_RETRY_COUNT = 3;\n    _this.DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\n    _this.DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n    _this.retryCount = typeof retryCount === \"number\" ? retryCount : _this.DEFAULT_CLIENT_RETRY_COUNT;\n    _this.retryInterval = typeof retryInterval === \"number\" ? retryInterval : _this.DEFAULT_CLIENT_RETRY_INTERVAL;\n    _this.minRetryInterval = typeof minRetryInterval === \"number\" ? minRetryInterval : _this.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    _this.maxRetryInterval = typeof maxRetryInterval === \"number\" ? maxRetryInterval : _this.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    return _this;\n  }\n  SystemErrorRetryPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n    return this._nextPolicy.sendRequest(request.clone()).catch(function (error) {\n      return retry(_this, request, error.response, error);\n    });\n  };\n  return SystemErrorRetryPolicy;\n}(BaseRequestPolicy);\nexport { SystemErrorRetryPolicy };\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy, retryData) {\n  var currentCount;\n  if (!retryData) {\n    throw new Error(\"retryData for the SystemErrorRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = retryData && retryData.retryCount;\n  }\n  return currentCount < policy.retryCount;\n}\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {RetryData} retryData  The retry data.\n * @param {object} err        The operation\"s error, if any.\n */\nfunction updateRetryData(policy, retryData, err) {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n    retryData.error = err;\n  }\n  // Adjust retry count\n  retryData.retryCount++;\n  // Adjust retry interval\n  var incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  var boundedRandDelta = policy.retryInterval * 0.8 + Math.floor(Math.random() * (policy.retryInterval * 0.4));\n  incrementDelta *= boundedRandDelta;\n  retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);\n  return retryData;\n}\nfunction retry(policy, request, operationResponse, err, retryData) {\n  return __awaiter(this, void 0, void 0, function () {\n    var error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          retryData = updateRetryData(policy, retryData, err);\n          if (!(err && err.code && shouldRetry(policy, retryData) && (err.code === \"ETIMEDOUT\" || err.code === \"ESOCKETTIMEDOUT\" || err.code === \"ECONNREFUSED\" || err.code === \"ECONNRESET\" || err.code === \"ENOENT\"))) return [3 /*break*/, 5];\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, utils.delay(retryData.retryInterval)];\n        case 2:\n          _a.sent();\n          return [2 /*return*/, policy._nextPolicy.sendRequest(request.clone())];\n        case 3:\n          error_1 = _a.sent();\n          return [2 /*return*/, retry(policy, request, operationResponse, error_1, retryData)];\n        case 4:\n          return [3 /*break*/, 6];\n        case 5:\n          if (err) {\n            // If the operation failed in the end, return all errors instead of just the last one\n            return [2 /*return*/, Promise.reject(retryData.error)];\n          }\n          return [2 /*return*/, operationResponse];\n        case 6:\n          return [2 /*return*/];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["utils","BaseRequestPolicy","systemErrorRetryPolicy","retryCount","retryInterval","minRetryInterval","maxRetryInterval","create","nextPolicy","options","SystemErrorRetryPolicy","__extends","_super","_this","DEFAULT_CLIENT_RETRY_COUNT","DEFAULT_CLIENT_RETRY_INTERVAL","DEFAULT_CLIENT_MIN_RETRY_INTERVAL","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","request","_nextPolicy","sendRequest","clone","catch","error","response","shouldRetry","policy","retryData","currentCount","Error","updateRetryData","err","innerError","incrementDelta","Math","pow","boundedRandDelta","floor","random","min","retry","operationResponse","code","delay","_a","error_1","Promise","reject"],"sources":["C:\\Users\\willi\\Downloads\\azure-copa\\node_modules\\@azure\\ms-rest-js\\lib\\policies\\systemErrorRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptionsLike,\n} from \"./requestPolicy\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function systemErrorRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  minRetryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new SystemErrorRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        minRetryInterval,\n        maxRetryInterval\n      );\n    },\n  };\n}\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n *\n * @constructor\n * @param {number} retryCount        The client retry count.\n * @param {number} retryInterval     The client retry interval, in milliseconds.\n * @param {number} minRetryInterval  The minimum retry interval, in milliseconds.\n * @param {number} maxRetryInterval  The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  retryCount: number;\n  retryInterval: number;\n  minRetryInterval: number;\n  maxRetryInterval: number;\n  DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\n  DEFAULT_CLIENT_RETRY_COUNT = 3;\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\n  DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptionsLike,\n    retryCount?: number,\n    retryInterval?: number,\n    minRetryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    this.retryCount = typeof retryCount === \"number\" ? retryCount : this.DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval =\n      typeof retryInterval === \"number\" ? retryInterval : this.DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval =\n      typeof minRetryInterval === \"number\"\n        ? minRetryInterval\n        : this.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval =\n      typeof maxRetryInterval === \"number\"\n        ? maxRetryInterval\n        : this.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .catch((error) => retry(this, request, error.response, error));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy: SystemErrorRetryPolicy, retryData: RetryData): boolean {\n  let currentCount;\n  if (!retryData) {\n    throw new Error(\"retryData for the SystemErrorRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = retryData && retryData.retryCount;\n  }\n  return currentCount < policy.retryCount;\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {RetryData} retryData  The retry data.\n * @param {object} err        The operation\"s error, if any.\n */\nfunction updateRetryData(\n  policy: SystemErrorRetryPolicy,\n  retryData?: RetryData,\n  err?: RetryError\n): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0,\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta =\n    policy.retryInterval * 0.8 + Math.floor(Math.random() * (policy.retryInterval * 0.4));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(\n    policy.minRetryInterval + incrementDelta,\n    policy.maxRetryInterval\n  );\n\n  return retryData;\n}\n\nasync function retry(\n  policy: SystemErrorRetryPolicy,\n  request: WebResourceLike,\n  operationResponse: HttpOperationResponse,\n  err?: RetryError,\n  retryData?: RetryData\n): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, err);\n  if (\n    err &&\n    err.code &&\n    shouldRetry(policy, retryData) &&\n    (err.code === \"ETIMEDOUT\" ||\n      err.code === \"ESOCKETTIMEDOUT\" ||\n      err.code === \"ECONNREFUSED\" ||\n      err.code === \"ECONNRESET\" ||\n      err.code === \"ENOENT\")\n  ) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    try {\n      await utils.delay(retryData.retryInterval);\n      return policy._nextPolicy.sendRequest(request.clone());\n    } catch (error) {\n      return retry(policy, request, operationResponse, error, retryData);\n    }\n  } else {\n    if (err) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      return Promise.reject(retryData.error);\n    }\n    return operationResponse;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}