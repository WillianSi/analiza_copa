{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nvar BaseRequestPolicy = /** @class */function () {\n  function BaseRequestPolicy(_nextPolicy, _options) {\n    this._nextPolicy = _nextPolicy;\n    this._options = _options;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  BaseRequestPolicy.prototype.shouldLog = function (logLevel) {\n    return this._options.shouldLog(logLevel);\n  };\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  BaseRequestPolicy.prototype.log = function (logLevel, message) {\n    this._options.log(logLevel, message);\n  };\n  return BaseRequestPolicy;\n}();\nexport { BaseRequestPolicy };\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nvar RequestPolicyOptions = /** @class */function () {\n  function RequestPolicyOptions(_logger) {\n    this._logger = _logger;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  RequestPolicyOptions.prototype.shouldLog = function (logLevel) {\n    return !!this._logger && logLevel !== HttpPipelineLogLevel.OFF && logLevel <= this._logger.minimumLogLevel;\n  };\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  RequestPolicyOptions.prototype.log = function (logLevel, message) {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  };\n  return RequestPolicyOptions;\n}();\nexport { RequestPolicyOptions };","map":{"version":3,"mappings":"AAAA;AACA;AAIA,SAASA,oBAAoB,QAAQ,yBAAyB;AAc9D;EACE,2BACWC,WAA0B,EAC1BC,QAAkC;IADlC,gBAAW,GAAXD,WAAW;IACX,aAAQ,GAARC,QAAQ;EAChB;EAIH;;;;;EAKOC,qCAAS,GAAhB,UAAiBC,QAA8B;IAC7C,OAAO,IAAI,CAACF,QAAQ,CAACG,SAAS,CAACD,QAAQ,CAAC;EAC1C,CAAC;EAED;;;;;;EAMOD,+BAAG,GAAV,UAAWC,QAA8B,EAAEE,OAAe;IACxD,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACH,QAAQ,EAAEE,OAAO,CAAC;EACtC,CAAC;EACH,wBAAC;AAAD,CAAC,EA1BD;;AAgDA;;;AAGA;EACE,8BAAoBE,OAA4B;IAA5B,YAAO,GAAPA,OAAO;EAAwB;EAEnD;;;;;EAKOC,wCAAS,GAAhB,UAAiBL,QAA8B;IAC7C,OACE,CAAC,CAAC,IAAI,CAACI,OAAO,IACdJ,QAAQ,KAAKJ,oBAAoB,CAACU,GAAG,IACrCN,QAAQ,IAAI,IAAI,CAACI,OAAO,CAACG,eAAe;EAE5C,CAAC;EAED;;;;;;EAMOF,kCAAG,GAAV,UAAWL,QAA8B,EAAEE,OAAe;IACxD,IAAI,IAAI,CAACE,OAAO,IAAI,IAAI,CAACH,SAAS,CAACD,QAAQ,CAAC,EAAE;MAC5C,IAAI,CAACI,OAAO,CAACD,GAAG,CAACH,QAAQ,EAAEE,OAAO,CAAC;;EAEvC,CAAC;EACH,2BAAC;AAAD,CAAC,EA3BD","names":["HttpPipelineLogLevel","_nextPolicy","_options","BaseRequestPolicy","logLevel","shouldLog","message","log","_logger","RequestPolicyOptions","OFF","minimumLogLevel"],"sources":["C:\\Users\\willi\\Downloads\\azure-main\\node_modules\\@azure\\ms-rest-js\\lib\\policies\\requestPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpPipelineLogger } from \"../httpPipelineLogger\";\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a new RequestPolicy per-request that uses the provided nextPolicy.\n */\nexport type RequestPolicyFactory = {\n  create(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike): RequestPolicy;\n};\n\nexport interface RequestPolicy {\n  sendRequest(httpRequest: WebResourceLike): Promise<HttpOperationResponse>;\n}\n\nexport abstract class BaseRequestPolicy implements RequestPolicy {\n  protected constructor(\n    readonly _nextPolicy: RequestPolicy,\n    readonly _options: RequestPolicyOptionsLike\n  ) {}\n\n  public abstract sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse>;\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return this._options.shouldLog(logLevel);\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    this._options.log(logLevel, message);\n  }\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport interface RequestPolicyOptionsLike {\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  shouldLog(logLevel: HttpPipelineLogLevel): boolean;\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meet the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  log(logLevel: HttpPipelineLogLevel, message: string): void;\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport class RequestPolicyOptions implements RequestPolicyOptionsLike {\n  constructor(private _logger?: HttpPipelineLogger) {}\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return (\n      !!this._logger &&\n      logLevel !== HttpPipelineLogLevel.OFF &&\n      logLevel <= this._logger.minimumLogLevel\n    );\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}